# DAA 2 - Huffman Coding (Using Greedy Approach)

import heapq

# Node structure for Huffman Tree
class HuffmanNode:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    # Defining less than operator for priority queue comparison
    def __lt__(self, other):
        return self.freq < other.freq

# Function to generate Huffman codes
def generate_codes(root, current_code, codes):
    if root is None:
        return
    if root.char is not None:
        codes[root.char] = current_code
    generate_codes(root.left, current_code + "0", codes)
    generate_codes(root.right, current_code + "1", codes)

# Function to build Huffman Tree
def build_huffman_tree(frequency):
    heap = []
    # Insert all characters with their frequencies into the heap
    for char, freq in frequency.items():
        heapq.heappush(heap, HuffmanNode(char, freq))

    # Merge nodes until we have one tree
    while len(heap) > 1:
        node1 = heapq.heappop(heap)
        node2 = heapq.heappop(heap)
        # Create a new internal node with the combined frequency
        merged = HuffmanNode(None, node1.freq + node2.freq)
        merged.left = node1
        merged.right = node2
        heapq.heappush(heap, merged)

    # The root of the Huffman Tree
    return heapq.heappop(heap)

# Function to calculate frequency of characters
def calculate_frequency(data):
    frequency = {}
    for char in data:
        if char not in frequency:
            frequency[char] = 0
        frequency[char] += 1
    return frequency

# Huffman Encoding process
def huffman_encoding(data):
    frequency = calculate_frequency(data)
    huffman_tree_root = build_huffman_tree(frequency)

    codes = {}
    generate_codes(huffman_tree_root, "", codes)

    # Encode the input data
    encoded_data = "".join([codes[char] for char in data])

    return encoded_data, huffman_tree_root

# Huffman Decoding process
def huffman_decoding(encoded_data, huffman_tree_root):
    decoded_data = ""
    current_node = huffman_tree_root
    for bit in encoded_data:
        if bit == '0':
            current_node = current_node.left
        else:
            current_node = current_node.right

        if current_node.left is None and current_node.right is None:
            decoded_data += current_node.char
            current_node = huffman_tree_root

    return decoded_data

# Driver code for user input
if __name__ == "__main__":
    data = input("Enter the data to encode: ")

    encoded_data, huffman_tree_root = huffman_encoding(data)
    print(f"Encoded Data: {encoded_data}")

    decoded_data = huffman_decoding(encoded_data, huffman_tree_root)
    print(f"Decoded Data: {decoded_data}")

    # Verification of matching encoded and decoded data
    if data == decoded_data:
        print("The encoded and decoded messages match, hence verification is successful.")
    else:
        print("The encoded and decoded messages do not match, verification failed.")




-------------------------------------------------------------------------------------------------------------------------------------------

// BT Bank 



// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

contract banking {
    mapping(address => uint) public user_account;
    mapping(address => bool) public user_exists;

    function create_account() public payable returns(string memory) {
        require(user_exists[msg.sender] == false, 'Account already created');
        
        if (msg.value == 0) {
            user_account[msg.sender] = 0;
            user_exists[msg.sender] = true;
            return "Account created";
        }

        require(user_exists[msg.sender] == false, "Account already created");
        user_account[msg.sender] = msg.value;
        user_exists[msg.sender] = true;
        return "Account created";
    }

    function deposit() public payable returns(string memory) {
        require(user_exists[msg.sender] == true, "Account not created");
        require(msg.value > 0, "Value for deposit is Zero");
        user_account[msg.sender] = user_account[msg.sender] + msg.value;
        return "Deposited Successfully";
    }

    function withdraw(uint amount) public payable returns(string memory) {
        require(user_account[msg.sender] > amount, "Insufficient Balance");
        require(user_exists[msg.sender] == true, "Account not created");
        require(amount > 0, "Amount should be more than zero");
        user_account[msg.sender] = user_account[msg.sender] - amount;
        msg.sender.transfer(amount);
        return "Withdrawal Successful";
    }

    function transfer(address payable userAddress, uint amount) public returns(string memory) {
        require(user_account[msg.sender] > amount, "Insufficient balance in Bank account");
        require(user_exists[msg.sender] == true, "Account is not created");
        require(user_exists[userAddress] == true, "Transfer account does not exist");
        require(amount > 0, "Amount should be more than zero");
        user_account[msg.sender] = user_account[msg.sender] - amount;
        user_account[userAddress] = user_account[userAddress] + amount;
        return "Transfer Successful";
    }

    function send_amt(address payable toAddress, uint256 amount) public payable returns(string memory) {
        require(user_account[msg.sender] > amount, "Insufficient balance in Bank account");
        require(user_exists[msg.sender] == true, "Account is not created");
        require(amount > 0, "Amount should be more than zero");
        user_account[msg.sender] = user_account[msg.sender] - amount;
        toAddress.transfer(amount);
        return "Transfer Success";
    }

    function user_balance() public view returns(uint) {
        return user_account[msg.sender];
    }

    function account_exist() public view returns(bool) {
        return user_exists[msg.sender];
    }
}

